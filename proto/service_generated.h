// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SERVICE_WSGW_PROTO_SERVICE_RECEIVE_H_
#define FLATBUFFERS_GENERATED_SERVICE_WSGW_PROTO_SERVICE_RECEIVE_H_

#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/flexbuffers.h"

#include "shared_generated.h"

namespace WsGw {
namespace proto {
namespace Service {

struct Handshake;

struct HandshakeResponse;

namespace Send {

struct SendPacket;

struct Response;

struct Exception;

struct Broadcast;

}  // namespace Send

namespace Receive {

struct ReceivePacket;

struct Request;

struct CancelRequest;

}  // namespace Receive

namespace Send {

enum Send {
  Send_NONE = 0,
  Send_Response = 1,
  Send_Exception = 2,
  Send_Broadcast = 3,
  Send_MIN = Send_NONE,
  Send_MAX = Send_Broadcast
};

inline const Send (&EnumValuesSend())[4] {
  static const Send values[] = {
    Send_NONE,
    Send_Response,
    Send_Exception,
    Send_Broadcast
  };
  return values;
}

inline const char * const *EnumNamesSend() {
  static const char * const names[] = {
    "NONE",
    "Response",
    "Exception",
    "Broadcast",
    nullptr
  };
  return names;
}

inline const char *EnumNameSend(Send e) {
  if (e < Send_NONE || e > Send_Broadcast) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSend()[index];
}

template<typename T> struct SendTraits {
  static const Send enum_value = Send_NONE;
};

template<> struct SendTraits<Response> {
  static const Send enum_value = Send_Response;
};

template<> struct SendTraits<Exception> {
  static const Send enum_value = Send_Exception;
};

template<> struct SendTraits<Broadcast> {
  static const Send enum_value = Send_Broadcast;
};

bool VerifySend(flatbuffers::Verifier &verifier, const void *obj, Send type);
bool VerifySendVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

}  // namespace Send

namespace Receive {

enum Receive {
  Receive_NONE = 0,
  Receive_Request = 1,
  Receive_CancelRequest = 2,
  Receive_MIN = Receive_NONE,
  Receive_MAX = Receive_CancelRequest
};

inline const Receive (&EnumValuesReceive())[3] {
  static const Receive values[] = {
    Receive_NONE,
    Receive_Request,
    Receive_CancelRequest
  };
  return values;
}

inline const char * const *EnumNamesReceive() {
  static const char * const names[] = {
    "NONE",
    "Request",
    "CancelRequest",
    nullptr
  };
  return names;
}

inline const char *EnumNameReceive(Receive e) {
  if (e < Receive_NONE || e > Receive_CancelRequest) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesReceive()[index];
}

template<typename T> struct ReceiveTraits {
  static const Receive enum_value = Receive_NONE;
};

template<> struct ReceiveTraits<Request> {
  static const Receive enum_value = Receive_Request;
};

template<> struct ReceiveTraits<CancelRequest> {
  static const Receive enum_value = Receive_CancelRequest;
};

bool VerifyReceive(flatbuffers::Verifier &verifier, const void *obj, Receive type);
bool VerifyReceiveVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

}  // namespace Receive

struct Handshake FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAGIC = 4,
    VT_VERSION = 6,
    VT_NAME = 8,
    VT_TYPE = 10,
    VT_SRVVER = 12
  };
  const flatbuffers::String *magic() const {
    return GetPointer<const flatbuffers::String *>(VT_MAGIC);
  }
  uint32_t version() const {
    return GetField<uint32_t>(VT_VERSION, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *type() const {
    return GetPointer<const flatbuffers::String *>(VT_TYPE);
  }
  const flatbuffers::String *srvver() const {
    return GetPointer<const flatbuffers::String *>(VT_SRVVER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MAGIC) &&
           verifier.VerifyString(magic()) &&
           VerifyField<uint32_t>(verifier, VT_VERSION) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_SRVVER) &&
           verifier.VerifyString(srvver()) &&
           verifier.EndTable();
  }
};

struct HandshakeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_magic(flatbuffers::Offset<flatbuffers::String> magic) {
    fbb_.AddOffset(Handshake::VT_MAGIC, magic);
  }
  void add_version(uint32_t version) {
    fbb_.AddElement<uint32_t>(Handshake::VT_VERSION, version, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Handshake::VT_NAME, name);
  }
  void add_type(flatbuffers::Offset<flatbuffers::String> type) {
    fbb_.AddOffset(Handshake::VT_TYPE, type);
  }
  void add_srvver(flatbuffers::Offset<flatbuffers::String> srvver) {
    fbb_.AddOffset(Handshake::VT_SRVVER, srvver);
  }
  explicit HandshakeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HandshakeBuilder &operator=(const HandshakeBuilder &);
  flatbuffers::Offset<Handshake> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Handshake>(end);
    return o;
  }
};

inline flatbuffers::Offset<Handshake> CreateHandshake(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> magic = 0,
    uint32_t version = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> type = 0,
    flatbuffers::Offset<flatbuffers::String> srvver = 0) {
  HandshakeBuilder builder_(_fbb);
  builder_.add_srvver(srvver);
  builder_.add_type(type);
  builder_.add_name(name);
  builder_.add_version(version);
  builder_.add_magic(magic);
  return builder_.Finish();
}

inline flatbuffers::Offset<Handshake> CreateHandshakeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *magic = nullptr,
    uint32_t version = 0,
    const char *name = nullptr,
    const char *type = nullptr,
    const char *srvver = nullptr) {
  auto magic__ = magic ? _fbb.CreateString(magic) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto srvver__ = srvver ? _fbb.CreateString(srvver) : 0;
  return WsGw::proto::Service::CreateHandshake(
      _fbb,
      magic__,
      version,
      name__,
      type__,
      srvver__);
}

struct HandshakeResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAGIC = 4
  };
  const flatbuffers::String *magic() const {
    return GetPointer<const flatbuffers::String *>(VT_MAGIC);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MAGIC) &&
           verifier.VerifyString(magic()) &&
           verifier.EndTable();
  }
};

struct HandshakeResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_magic(flatbuffers::Offset<flatbuffers::String> magic) {
    fbb_.AddOffset(HandshakeResponse::VT_MAGIC, magic);
  }
  explicit HandshakeResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HandshakeResponseBuilder &operator=(const HandshakeResponseBuilder &);
  flatbuffers::Offset<HandshakeResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HandshakeResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<HandshakeResponse> CreateHandshakeResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> magic = 0) {
  HandshakeResponseBuilder builder_(_fbb);
  builder_.add_magic(magic);
  return builder_.Finish();
}

inline flatbuffers::Offset<HandshakeResponse> CreateHandshakeResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *magic = nullptr) {
  auto magic__ = magic ? _fbb.CreateString(magic) : 0;
  return WsGw::proto::Service::CreateHandshakeResponse(
      _fbb,
      magic__);
}

namespace Send {

struct SendPacket FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PACKET_TYPE = 4,
    VT_PACKET = 6
  };
  Send packet_type() const {
    return static_cast<Send>(GetField<uint8_t>(VT_PACKET_TYPE, 0));
  }
  const void *packet() const {
    return GetPointer<const void *>(VT_PACKET);
  }
  template<typename T> const T *packet_as() const;
  const Response *packet_as_Response() const {
    return packet_type() == Send_Response ? static_cast<const Response *>(packet()) : nullptr;
  }
  const Exception *packet_as_Exception() const {
    return packet_type() == Send_Exception ? static_cast<const Exception *>(packet()) : nullptr;
  }
  const Broadcast *packet_as_Broadcast() const {
    return packet_type() == Send_Broadcast ? static_cast<const Broadcast *>(packet()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PACKET_TYPE) &&
           VerifyOffset(verifier, VT_PACKET) &&
           VerifySend(verifier, packet(), packet_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Response *SendPacket::packet_as<Response>() const {
  return packet_as_Response();
}

template<> inline const Exception *SendPacket::packet_as<Exception>() const {
  return packet_as_Exception();
}

template<> inline const Broadcast *SendPacket::packet_as<Broadcast>() const {
  return packet_as_Broadcast();
}

struct SendPacketBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_packet_type(Send packet_type) {
    fbb_.AddElement<uint8_t>(SendPacket::VT_PACKET_TYPE, static_cast<uint8_t>(packet_type), 0);
  }
  void add_packet(flatbuffers::Offset<void> packet) {
    fbb_.AddOffset(SendPacket::VT_PACKET, packet);
  }
  explicit SendPacketBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SendPacketBuilder &operator=(const SendPacketBuilder &);
  flatbuffers::Offset<SendPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SendPacket>(end);
    return o;
  }
};

inline flatbuffers::Offset<SendPacket> CreateSendPacket(
    flatbuffers::FlatBufferBuilder &_fbb,
    Send packet_type = Send_NONE,
    flatbuffers::Offset<void> packet = 0) {
  SendPacketBuilder builder_(_fbb);
  builder_.add_packet(packet);
  builder_.add_packet_type(packet_type);
  return builder_.Finish();
}

struct Response FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_PAYLOAD = 6
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const flatbuffers::Vector<uint8_t> *payload() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_PAYLOAD);
  }
  flexbuffers::Reference payload_flexbuffer_root() const {
    return flexbuffers::GetRoot(payload()->Data(), payload()->size());
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           verifier.VerifyVector(payload()) &&
           verifier.EndTable();
  }
};

struct ResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(Response::VT_ID, id, 0);
  }
  void add_payload(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> payload) {
    fbb_.AddOffset(Response::VT_PAYLOAD, payload);
  }
  explicit ResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseBuilder &operator=(const ResponseBuilder &);
  flatbuffers::Offset<Response> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Response>(end);
    return o;
  }
};

inline flatbuffers::Offset<Response> CreateResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> payload = 0) {
  ResponseBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<Response> CreateResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    const std::vector<uint8_t> *payload = nullptr) {
  auto payload__ = payload ? _fbb.CreateVector<uint8_t>(*payload) : 0;
  return WsGw::proto::Service::Send::CreateResponse(
      _fbb,
      id,
      payload__);
}

struct Exception FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_INFO = 6
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const WsGw::proto::ExceptionInfo *info() const {
    return GetPointer<const WsGw::proto::ExceptionInfo *>(VT_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_INFO) &&
           verifier.VerifyTable(info()) &&
           verifier.EndTable();
  }
};

struct ExceptionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(Exception::VT_ID, id, 0);
  }
  void add_info(flatbuffers::Offset<WsGw::proto::ExceptionInfo> info) {
    fbb_.AddOffset(Exception::VT_INFO, info);
  }
  explicit ExceptionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ExceptionBuilder &operator=(const ExceptionBuilder &);
  flatbuffers::Offset<Exception> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Exception>(end);
    return o;
  }
};

inline flatbuffers::Offset<Exception> CreateException(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    flatbuffers::Offset<WsGw::proto::ExceptionInfo> info = 0) {
  ExceptionBuilder builder_(_fbb);
  builder_.add_info(info);
  builder_.add_id(id);
  return builder_.Finish();
}

struct Broadcast FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_PAYLOAD = 6
  };
  const flatbuffers::String *key() const {
    return GetPointer<const flatbuffers::String *>(VT_KEY);
  }
  const flatbuffers::Vector<uint8_t> *payload() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_PAYLOAD);
  }
  flexbuffers::Reference payload_flexbuffer_root() const {
    return flexbuffers::GetRoot(payload()->Data(), payload()->size());
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           verifier.VerifyVector(payload()) &&
           verifier.EndTable();
  }
};

struct BroadcastBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(flatbuffers::Offset<flatbuffers::String> key) {
    fbb_.AddOffset(Broadcast::VT_KEY, key);
  }
  void add_payload(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> payload) {
    fbb_.AddOffset(Broadcast::VT_PAYLOAD, payload);
  }
  explicit BroadcastBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BroadcastBuilder &operator=(const BroadcastBuilder &);
  flatbuffers::Offset<Broadcast> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Broadcast>(end);
    return o;
  }
};

inline flatbuffers::Offset<Broadcast> CreateBroadcast(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> key = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> payload = 0) {
  BroadcastBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_key(key);
  return builder_.Finish();
}

inline flatbuffers::Offset<Broadcast> CreateBroadcastDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    const std::vector<uint8_t> *payload = nullptr) {
  auto key__ = key ? _fbb.CreateString(key) : 0;
  auto payload__ = payload ? _fbb.CreateVector<uint8_t>(*payload) : 0;
  return WsGw::proto::Service::Send::CreateBroadcast(
      _fbb,
      key__,
      payload__);
}

}  // namespace Send

namespace Receive {

struct ReceivePacket FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PACKET_TYPE = 4,
    VT_PACKET = 6
  };
  Receive packet_type() const {
    return static_cast<Receive>(GetField<uint8_t>(VT_PACKET_TYPE, 0));
  }
  const void *packet() const {
    return GetPointer<const void *>(VT_PACKET);
  }
  template<typename T> const T *packet_as() const;
  const Request *packet_as_Request() const {
    return packet_type() == Receive_Request ? static_cast<const Request *>(packet()) : nullptr;
  }
  const CancelRequest *packet_as_CancelRequest() const {
    return packet_type() == Receive_CancelRequest ? static_cast<const CancelRequest *>(packet()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PACKET_TYPE) &&
           VerifyOffset(verifier, VT_PACKET) &&
           VerifyReceive(verifier, packet(), packet_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Request *ReceivePacket::packet_as<Request>() const {
  return packet_as_Request();
}

template<> inline const CancelRequest *ReceivePacket::packet_as<CancelRequest>() const {
  return packet_as_CancelRequest();
}

struct ReceivePacketBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_packet_type(Receive packet_type) {
    fbb_.AddElement<uint8_t>(ReceivePacket::VT_PACKET_TYPE, static_cast<uint8_t>(packet_type), 0);
  }
  void add_packet(flatbuffers::Offset<void> packet) {
    fbb_.AddOffset(ReceivePacket::VT_PACKET, packet);
  }
  explicit ReceivePacketBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ReceivePacketBuilder &operator=(const ReceivePacketBuilder &);
  flatbuffers::Offset<ReceivePacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ReceivePacket>(end);
    return o;
  }
};

inline flatbuffers::Offset<ReceivePacket> CreateReceivePacket(
    flatbuffers::FlatBufferBuilder &_fbb,
    Receive packet_type = Receive_NONE,
    flatbuffers::Offset<void> packet = 0) {
  ReceivePacketBuilder builder_(_fbb);
  builder_.add_packet(packet);
  builder_.add_packet_type(packet_type);
  return builder_.Finish();
}

struct Request FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_ID = 6,
    VT_PAYLOAD = 8
  };
  const flatbuffers::String *key() const {
    return GetPointer<const flatbuffers::String *>(VT_KEY);
  }
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const flatbuffers::Vector<uint8_t> *payload() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_PAYLOAD);
  }
  flexbuffers::Reference payload_flexbuffer_root() const {
    return flexbuffers::GetRoot(payload()->Data(), payload()->size());
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           verifier.VerifyVector(payload()) &&
           verifier.EndTable();
  }
};

struct RequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(flatbuffers::Offset<flatbuffers::String> key) {
    fbb_.AddOffset(Request::VT_KEY, key);
  }
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(Request::VT_ID, id, 0);
  }
  void add_payload(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> payload) {
    fbb_.AddOffset(Request::VT_PAYLOAD, payload);
  }
  explicit RequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestBuilder &operator=(const RequestBuilder &);
  flatbuffers::Offset<Request> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Request>(end);
    return o;
  }
};

inline flatbuffers::Offset<Request> CreateRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> key = 0,
    uint32_t id = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> payload = 0) {
  RequestBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_id(id);
  builder_.add_key(key);
  return builder_.Finish();
}

inline flatbuffers::Offset<Request> CreateRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    uint32_t id = 0,
    const std::vector<uint8_t> *payload = nullptr) {
  auto key__ = key ? _fbb.CreateString(key) : 0;
  auto payload__ = payload ? _fbb.CreateVector<uint8_t>(*payload) : 0;
  return WsGw::proto::Service::Receive::CreateRequest(
      _fbb,
      key__,
      id,
      payload__);
}

struct CancelRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           verifier.EndTable();
  }
};

struct CancelRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(CancelRequest::VT_ID, id, 0);
  }
  explicit CancelRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CancelRequestBuilder &operator=(const CancelRequestBuilder &);
  flatbuffers::Offset<CancelRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CancelRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<CancelRequest> CreateCancelRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0) {
  CancelRequestBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

}  // namespace Receive

namespace Send {

}  // namespace Send

namespace Receive {

}  // namespace Receive

namespace Send {

inline bool VerifySend(flatbuffers::Verifier &verifier, const void *obj, Send type) {
  switch (type) {
    case Send_NONE: {
      return true;
    }
    case Send_Response: {
      auto ptr = reinterpret_cast<const Response *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Send_Exception: {
      auto ptr = reinterpret_cast<const Exception *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Send_Broadcast: {
      auto ptr = reinterpret_cast<const Broadcast *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifySendVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifySend(
        verifier,  values->Get(i), types->GetEnum<Send>(i))) {
      return false;
    }
  }
  return true;
}

}  // namespace Send

namespace Receive {

inline bool VerifyReceive(flatbuffers::Verifier &verifier, const void *obj, Receive type) {
  switch (type) {
    case Receive_NONE: {
      return true;
    }
    case Receive_Request: {
      auto ptr = reinterpret_cast<const Request *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Receive_CancelRequest: {
      auto ptr = reinterpret_cast<const CancelRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyReceiveVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyReceive(
        verifier,  values->Get(i), types->GetEnum<Receive>(i))) {
      return false;
    }
  }
  return true;
}

}  // namespace Receive
}  // namespace Service
}  // namespace proto
}  // namespace WsGw

#endif  // FLATBUFFERS_GENERATED_SERVICE_WSGW_PROTO_SERVICE_RECEIVE_H_
